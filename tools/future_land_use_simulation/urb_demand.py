# -*- coding: utf-8 -*-
"""
/***************************************************************************
 UrbanAreaDemand
                                 A QGIS plugin
 Urban Area Demand
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-03-24
        git sha              : $Format:%H$
        copyright            : (C) 2023 by GALUP
        email                : koreyarsenault@ufl.edu
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
import numpy as np
import pandas as pd
import geopandas as gpd
import os  # This is is needed in the pyqgis console also
from qgis.core import *
import pylusat
from shapely.geometry import Polygon
from qgis import processing
from pathlib import Path
from qgis.utils import iface
from scoop import futures
from qgis.core import QgsProcessingParameterVectorDestination

import sys
sys.path.append('.lib')

from .lib import config
from .lib.config import * 
from .lib import ga
from .lib import lucis


# Initialize Qt resources from file resources.py
from .resources import *

# Import the code for the dialog
from .urb_demand_dialog import UrbanAreaDemandDialog
import os.path


class UrbanAreaDemand:
    """QGIS Plugin Implementation."""

    FUTURE_SCENARIO = "FUTURE_SCENARIO"

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value("locale/userLocale")[0:2]
        locale_path = os.path.join(
            self.plugin_dir, "i18n", "UrbanAreaDemand_{}.qm".format(locale)
        )

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr("&UrbanAreaDemand")

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate("UrbanAreaDemand", message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None,
    ):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(self.menu, action)

        self.actions.append(action)

        return action

    def initAlgorith(self):
        self.addParameter(
            QgsProcessingParameterVectorDestination(
                self.OUTPUT, self.tr("Output layer")
            )
        )

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ":/plugins/urb_demand/icon.png"
        self.add_action(
            icon_path,
            text=self.tr("Urban Area Demand"),
            callback=self.run,
            parent=self.iface.mainWindow(),
        )

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(self.tr("&UrbanAreaDemand"), action)
            self.iface.removeToolBarIcon(action)

    def work_flow(self):
        # set progress bar max
        prog = self.dlg.progressBar

        prog.setMinimum(0)
        prog.setMaximum(100)

        prog.setValue(1)

        workspace = self.dlg.file_wksp.filePath()

        temp_csv = self.dlg.file_slopes.filePath()
        temp_df = pd.read_csv(temp_csv)
        temp_ag_str = temp_df["TEMP_PER_AG"].values[0]
        temp_con_str = temp_df["TEMP_PER_CON"].values[0]
        temp_urb_str = temp_df["TEMP_PER_URB"].values[0]
        temp_water_str = temp_df["TEMP_PER_WATER"].values[0]
        temp_herb_str = temp_df["TEMP_PER_HERB"].values[0]
        temp_constraint = self.dlg.le_temp.text()
        prog.setValue(5)

        config.TEMP_PER_AG = float(temp_ag_str)
        config.TEMP_PER_CON = float(temp_con_str)
        config.TEMP_PER_URB = float(temp_urb_str)
        config.TEMP_PER_WATER = float(temp_water_str)
        config.TEMP_PER_HERB = float(temp_herb_str)
        config.TEMP_TARGET = float(temp_constraint)
        prog.setValue(10)

        current_lc = self.dlg.file_lc.filePath()

        ag_suit = self.dlg.file_ag_suit.filePath()
        ag_rank = self.dlg.le_ag_suit.text()

        con_suit = self.dlg.file_con_suit.filePath()
        con_rank = self.dlg.le_con_suit.text()

        urb_suit = self.dlg.file_urb_suit.filePath()
        urb_rank = self.dlg.le_urb_suit.text()
        prog.setValue(30)

        root_dir = os.path.dirname(os.path.realpath(__file__))

        df = pd.read_csv(os.path.join(root_dir, "population.csv"))

        dsct = self.dlg.cb_district.currentText()

        proj_pop = self.dlg.le_proj_pop.text()

        proj_gdd = self.dlg.le_gdd_change.text()

        lc_output = ""

        pop_current = self.dlg.le_curr_pop.text()

        # defining custom area of analysis
        study_area = self.dlg.file_area.filePath()

        prog.setValue(80)

        self.iface.messageBar().pushMessage(
            "Variables Loaded", level=Qgis.Success, duration=0
        )
        self.iface.mainWindow().repaint()

        filename, file_extension = os.path.splitext(study_area)
        # print(filename)
        # print(file_extension)

        if file_extension == ".shp":
            gdf = gpd.read_file(study_area)
            gdf.drop(
                columns=[
                    "right",
                    "left",
                    "bottom",
                    "top",
                    "LC_majorit",
                    "ag",
                    "con",
                    "urb",
                ],
                axis=1,
                inplace=True,
            )
        else:
            gdf = gpd.read_file(study_area, layer="kumasi_area")
            gdf.drop(
                columns=[
                    "right_",
                    "left_",
                    "bottom",
                    "top",
                    "LC_majorit",
                    "ag",
                    "con",
                    "urb",
                ],
                axis=1,
                inplace=True,
            )

        bounds = gdf.total_bounds

        # tuple unpacking to crop MGRS grid
        extent = "{0}, {2}, {1}, {3} [EPSG:32630]".format(*bounds)

        mgrsbb = study_area

        lc_clip = processing.run(
            "gdal:cliprasterbymasklayer",
            {
                "INPUT": current_lc,
                "MASK": mgrsbb,
                "SOURCE_CRS": None,
                "TARGET_CRS": None,
                "TARGET_EXTENT": None,
                "NODATA": None,
                "ALPHA_BAND": False,
                "CROP_TO_CUTLINE": True,
                "KEEP_RESOLUTION": False,
                "SET_RESOLUTION": False,
                "X_RESOLUTION": None,
                "Y_RESOLUTION": None,
                "MULTITHREADING": False,
                "OPTIONS": "",
                "DATA_TYPE": 0,
                "EXTRA": "",
                "OUTPUT": QgsProcessing.TEMPORARY_OUTPUT,
            },
        )["OUTPUT"]

        prog.setValue(100)

        self.iface.messageBar().clearWidgets()
        self.iface.messageBar().pushMessage(
            "Data clipped to extent", level=Qgis.Success, duration=0
        )
        self.iface.mainWindow().repaint()

        # read shapefile as geodataframe
        mgrs_gdf = gpd.read_file(mgrsbb)

        prog.setValue(0)

        prog.setValue(10)

        # calculate the average suitability value per MGRS grid cell
        mgrs_gdf = pylusat.zonal.zonal_stats_raster(
            mgrs_gdf, ag_suit, stats="mean", stats_prefix="ag", nodata=0
        )
        mgrs_gdf = pylusat.zonal.zonal_stats_raster(
            mgrs_gdf, con_suit, stats="mean", stats_prefix="con", nodata=0
        )
        mgrs_gdf = pylusat.zonal.zonal_stats_raster(
            mgrs_gdf, urb_suit, stats="mean", stats_prefix="urb", nodata=0
        )
        # calculate majority land cover per MGRS grid cell
        mgrs_gdf = pylusat.zonal.zonal_stats_raster(
            mgrs_gdf, lc_clip, stats="majority", stats_prefix="lc", nodata=0
        )

        self.iface.messageBar().clearWidgets()
        self.iface.messageBar().pushMessage(
            "Suitability levels calculated", level=Qgis.Success, duration=0
        )
        self.iface.mainWindow().repaint()

        prog.setValue(100)

        prog.setValue(0)

        # change column name in data frame
        mgrs_gdf.rename(
            columns={
                "lc_majority": "current_lu",
                "con_mean": "con_suit",
                "urb_mean": "urb_suit",
                "ag_mean": "ag_suit",
            },
            inplace=True,
        )

        prog.setValue(10)

        mask = mgrs_gdf["current_lu"].isin([1, 2, 3, 5])
        prog.setValue(30)

        mgrs_gdf["ag_pref"] = pd.cut(
            mgrs_gdf["ag_suit"],
            bins=[1, 1 + 8 / 3, 1 + 16 / 3, 9],
            labels=[1, 2, 3],
            include_lowest=True,
        ).astype(int)
        mgrs_gdf["con_pref"] = pd.cut(
            mgrs_gdf["con_suit"],
            bins=[1, 1 + 8 / 3, 1 + 16 / 3, 9],
            labels=[1, 2, 3],
            include_lowest=True,
        ).astype(int)
        mgrs_gdf["urb_pref"] = pd.cut(
            mgrs_gdf["urb_suit"],
            bins=[1, 1 + 8 / 3, 1 + 16 / 3, 9],
            labels=[1, 2, 3],
            include_lowest=True,
        ).astype(int)
        mgrs_gdf.loc[mask, "urban_conflict"] = mgrs_gdf[mask].apply(
            lambda x: lucis.LandUseConflict(
                x["ag_pref"], x["con_pref"], x["urb_pref"]
            ).urban_conflict(),
            axis=1,
        )
        prog.setValue(75)

        # export to final shapefile
        mgrs_gdf.loc[(mgrs_gdf["current_lu"] == 3)]

        urb = len(mgrs_gdf.loc[(mgrs_gdf["current_lu"] == 3)])
        # gdd = int(pop_current)/urb

        prog.setValue(100)

        self.iface.messageBar().clearWidgets()
        self.iface.messageBar().pushMessage(
            "GA set-up complete", level=Qgis.Success, duration=0
        )
        self.iface.mainWindow().repaint()

        prog.setValue(0)

        config.base_df = mgrs_gdf

        rdif = config.base_df['right'].max()-config.base_df['right'].min()
        rdiv = rdif/250+1
        row = int(rdiv)

        coldif = config.base_df['bottom'].max()-config.base_df['bottom'].min()
        coldiv = coldif/250+1
        col = int(coldiv)
        
        config.GRID_R = row
        config.GRID_C = col

        proj_pop = self.dlg.le_proj_pop.text()

        # PPL_PER_URB = gdd
        config.PPL_PER_URB = 514
        config.PPL_CURRENT = int(pop_current)
        config.PPL_GROWTH = int(proj_pop) - int(pop_current)

        config.min_conf = 0
        config.max_conf = config.GRID_C * config.GRID_R

        # --- Column names for the input DataFrame ---
        config.AG_SUIT = "ag_suit"  # agriculture suitability
        config.CON_SUIT = "con_suit"  # conservation suitability
        config.URB_SUIT = "urb_suit"  # urban suitability
        config.CURRENT_LU = "current_lu"  # current land use

        # --- GA parameters ---
        cxpb_str = self.dlg.le_cxpb.text()
        config.CXPB = float(cxpb_str)
        mut_str = self.dlg.le_mutpb.text()
        config.MUTPB = float(mut_str)
        gen_str = self.dlg.le_gen.text()
        config.GEN_NUM = float(gen_str)
        pop_str = self.dlg.le_init_pop.text()
        config.POP_SIZE = int(pop_str)

        # --- Initial sampling probability for each land use ---

        low_ag = float(self.dlg.le_ag_low.text())
        med_ag = float(self.dlg.le_ag_med.text())
        high_ag = float(self.dlg.le_ag_high.text())
        low_con = float(self.dlg.le_con_low.text())
        med_con = float(self.dlg.le_con_med.text())
        high_con = float(self.dlg.le_con_high.text())
        low_urb = float(self.dlg.le_urb_low.text())
        med_urb = float(self.dlg.le_urb_med.text())
        high_urb = float(self.dlg.le_urb_high.text())

        config.INIT_PROB_AG = {1: low_ag, 2: med_ag, 3: high_ag}
        config.INIT_PROB_CON = {1: low_con, 2: med_con, 3: high_con}
        config.INIT_PROB_URB = {1: low_urb, 2: med_urb, 3: high_urb}
        sample_str = self.dlg.le_init_sample.text()
        config.INIT_SAMPLE_SIZE = int(sample_str)  # number of cells changing its land use

        self.iface.messageBar().pushMessage(
            "Initializing GA Scenario", level=Qgis.Success, duration=0
        )
        self.iface.mainWindow().repaint()

        ga_result = ga.main()

        new_lu = self.dlg.le_out_field.text()

        config.base_df[new_lu] = ""

        config.base_df[new_lu] = ga_result[0]

        wk = str(workspace)

        # file = str(self.dlg.le_out_file.text())

        shp = self.dlg.check_shp
        gpk = self.dlg.check_gpk

        shpcheck = shp.checkState()
        gpkcheck = gpk.checkState()

        if shpcheck == 2:
            output_file = self.dlg.output.filePath()
            config.base_df.to_file(output_file, driver="ESRI Shapefile")
            lyr = QgsVectorLayer(output_file, self.FUTURE_SCENARIO, "ogr")
            QgsProject.instance().addMapLayer(lyr)
        elif gpkcheck == 2:
            output_file = self.dlg.output.filePath()
            config.base_df.to_file(output_file, driver="GPKG")
            iface.addVectorLayer(output_file, self.FUTURE_SCENARIO, "ogr")
        else:
            pass

            # print(hof[0])

        self.dlg.scrollArea.setWidgetResizable(True)

        dist_text = self.dlg.cb_district.currentText()
        dist_text_str = str(dist_text)

    # ---CONFIG.PY---

    def distreg(self):
        
        text = self.dlg.cb_region.currentText()

        if text == "N/A":
            self.dlg.cb_district.addItems(config.test)
        elif text == "Ahafo":
            self.dlg.cb_district.addItems(config.ahafo)
        elif text == "Ashanti":
            self.dlg.cb_district.clear()
            self.dlg.cb_district.addItems(config.ashanti)
        elif text == "Bono":
            self.dlg.cb_district.clear()
            self.dlg.cb_district.addItems(config.bono)
        elif text == "Bono East":
            self.dlg.cb_district.clear()
            self.dlg.cb_district.addItems(config.bono_east)
        elif text == "Central":
            self.dlg.cb_district.clear()
            self.dlg.cb_district.addItems(config.central)
        elif text == "Eastern":
            self.dlg.cb_district.clear()
            self.dlg.cb_district.addItems(config.eastern)
        elif text == "Greater Accra":
            self.dlg.cb_district.clear()
            self.dlg.cb_district.addItems(config.accra)
        elif text == "North East":
            self.dlg.cb_district.clear()
            self.dlg.cb_district.addItems(config.ne)
        elif text == "Northern":
            self.dlg.cb_district.clear()
            self.dlg.cb_district.addItems(config.north)
        elif text == "Oti":
            self.dlg.cb_district.clear()
            self.dlg.cb_district.addItems(config.oti)
        elif text == "Savannah":
            self.dlg.cb_district.clear()
            self.dlg.cb_district.addItems(config.sav)
        elif text == "Upper East":
            self.dlg.cb_district.clear()
            self.dlg.cb_district.addItems(config.ue)
        elif text == "Upper West":
            self.dlg.cb_district.clear()
            self.dlg.cb_district.addItems(config.uw)
        elif text == "Volta":
            self.dlg.cb_district.clear()
            self.dlg.cb_district.addItems(config.volta)
        elif text == "Western":
            self.dlg.cb_district.clear()
            self.dlg.cb_district.addItems(config.western)
        elif text == "Western North":
            self.dlg.cb_district.clear()
            self.dlg.cb_district.addItems(config.west_north)
        else:
            self.dlg.cb_district.clear()

    # ---CONF.PY---

    def csvload(self):
        root_dir = os.path.dirname(os.path.realpath(__file__))
        yr = self.dlg.cb_year.currentText()
        # yr = self.dlg.le_year  # define as mutually exclusive & new line edit for year

        current_pop = self.dlg.le_curr_pop

        proj_pop = self.dlg.le_proj_pop
        reg = self.dlg.cb_region.currentText()
        dsct = self.dlg.cb_district.currentText()

        pop_df = pd.read_csv(os.path.join(root_dir, "population.csv"))

        # print(pop_df.size)
        # print(pop_df.shape)

        pop_current = ""
        pop_project = ""

        if yr in config.yr_selectable:
            if dsct == "Entire Region":
                try:
                    pop_current = pop_df.loc[
                        pop_df["reg_prop"] == reg, "2020_pop"
                    ].sum()
                except IndexError:
                    pass
                try:
                    pop_project = pop_df.loc[
                        pop_df["reg_prop"] == reg, f"{yr}_pop"
                    ].sum()
                except IndexError:
                    pass
                # -- continue coding ---
                current_pop.setText(str(pop_current))
                proj_pop.setText(str(pop_project))
            else:  # district specific
                try:
                    pop_current = pop_df.loc[pop_df["dist"] == dsct, "2020_pop"].values[
                        0
                    ]
                except IndexError:
                    pass
                try:
                    pop_project = pop_df.loc[
                        pop_df["dist"] == dsct, f"{yr}_pop"
                    ].values[0]
                except IndexError:
                    pass
                current_pop.setText(str(pop_current))
                proj_pop.setText(str(pop_project))
        else:  # custom year
            if dsct == "Entire Region":
                try:
                    pop_current = pop_df.loc[
                        pop_df["reg_prop"] == reg, "2020_pop"
                    ].sum()
                except IndexError:
                    pass
                current_pop.setText(str(pop_current))
            else:  # district specific
                try:
                    pop_current = pop_df.loc[pop_df["dist"] == dsct, "2020_pop"].values[
                        0
                    ]
                except IndexError:
                    pass
                current_pop.setText(str(pop_current))

    def check(self):
        ag1 = self.dlg.check_ag_insuf
        ag2 = self.dlg.check_ag_ex
        con1 = self.dlg.check_con_insuf
        con2 = self.dlg.check_con_ex
        urb1 = self.dlg.check_urb_insuf
        urb2 = self.dlg.check_urb_ex

        # self.checkbox2.setCheckable(True)

        ag_check = ag1.checkState()

        if ag_check == 0:
            ag2.setCheckable(True)
        elif ag_check == 2:
            ag2.setCheckable(False)
        else:
            pass

        con_check = con1.checkState()

        if con_check == 0:
            con2.setCheckable(True)
        elif con_check == 2:
            con2.setCheckable(False)
        else:
            pass

        urb_check = urb1.checkState()

        if urb_check == 0:
            urb2.setCheckable(True)
        elif urb_check == 2:
            urb2.setCheckable(False)
        else:
            pass

    def check2(self):
        ag1 = self.dlg.check_ag_insuf
        ag2 = self.dlg.check_ag_ex
        con1 = self.dlg.check_con_insuf
        con2 = self.dlg.check_con_ex
        urb1 = self.dlg.check_urb_insuf
        urb2 = self.dlg.check_urb_ex

        check = ag1.checkState()
        ag_check2 = ag2.checkState()

        if ag_check2 == 0:
            ag1.setCheckable(True)
        elif ag_check2 == 2:
            ag1.setCheckable(False)
        else:
            pass

        con_check2 = con2.checkState()

        if con_check2 == 0:
            con1.setCheckable(True)
        elif con_check2 == 2:
            con1.setCheckable(False)
        else:
            pass

        urb_check2 = urb2.checkState()

        if urb_check2 == 0:
            urb1.setCheckable(True)
        elif urb_check2 == 2:
            urb1.setCheckable(False)
        else:
            pass

    def check3(self):
        shp = self.dlg.check_shp
        gpk = self.dlg.check_gpk

        shpcheck = shp.checkState()

        if shpcheck == 0:
            gpk.setCheckable(True)
        elif shpcheck == 2:
            gpk.setCheckable(False)
        else:
            pass

    def check4(self):
        shp = self.dlg.check_shp
        gpk = self.dlg.check_gpk

        gpkcheck = gpk.checkState()

        if gpkcheck == 0:
            shp.setCheckable(True)
        elif gpkcheck == 2:
            shp.setCheckable(False)
        else:
            pass
    
    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = UrbanAreaDemandDialog()
            # win = self.dlg.MainWindow
            # self.dlg.setWindowFlags(win.WindowStaysOnTopHint)
            self.dlg.button_box.button(self.dlg.button_box.Ok).setText("Run")
            self.dlg.button_box.button(self.dlg.button_box.Cancel).setText("Close")
            self.dlg.button_box.button(self.dlg.button_box.Ok).clicked.connect(self.work_flow)
            self.dlg.button_box.button(self.dlg.button_box.Cancel).clicked.connect(self.dlg.close)

            reg_list1 = [
                "N/A",
                "Ahafo",
                "Ashanti",
                "Bono",
                "Bono East",
                "Central",
                "Eastern",
                "Greater Accra",
                "North East",
                "Northern",
                "Oti",
                "Savannah",
                "Upper East",
                "Upper West",
                "Volta",
                "Western",
                "Western North",
            ]
            self.dlg.cb_region.addItems(reg_list1)

            self.dlg.cb_region.currentTextChanged.connect(self.distreg)
            self.dlg.cb_district.currentTextChanged.connect(self.csvload)
            self.dlg.cb_region.currentTextChanged.connect(self.csvload)
            self.dlg.cb_year.currentTextChanged.connect(self.csvload)
            self.dlg.check_ag_insuf.toggled.connect(self.check)
            self.dlg.check_ag_ex.toggled.connect(self.check2)
            self.dlg.check_con_insuf.toggled.connect(self.check)
            self.dlg.check_con_ex.toggled.connect(self.check2)
            self.dlg.check_urb_insuf.toggled.connect(self.check)
            self.dlg.check_urb_ex.toggled.connect(self.check2)
            self.dlg.check_shp.toggled.connect(self.check3)
            self.dlg.check_gpk.toggled.connect(self.check3)
            self.dlg.check_shp.toggled.connect(self.check4)
            self.dlg.check_gpk.toggled.connect(self.check4)

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            print(" ")
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
